#!/usr/bin/python
import os, sys
import zipfile
import traceback
import argparse

#todo: delete after tests
def help():
    print """Usage: openvpn_gen [-w, -m, -l, -a, -ca caDir] client
    --help, -h\tDisplay this help message
    -w\tCreate a Windows bundle
    -m\tCreate a Mac bundle
    -l\tCreate a Linux bundle
    -a\tCreate an Android Bundle
    -ca\tSpecify the CA directory

    client is the name of the key you wish to create. It is also the name you use to revoke a client"""
    confhelp()

def confhelp():
    print """You must create a settings file at /etc/openvpn/clients/server.conf in the following format:

server=server
port=port
proto=proto

port is optional and will default to 1194. proto may be tcp or udp, is optional and will default to udp.
server is mandatory and may be a hostname or ip address
"""
    sys.exit(0)

parser = argparse.ArgumentParser(description='A simple utility on top of OpenVPN\'s easy-rsa that creates a zip bundle of all needed files to connect to OpenVPN server for the 3 Major OSes and Android. A sample server configuration is included.')
parser.add_argument('-ca', metavar='-ca', type=str, nargs='?', help='The certification autority directory, default easy-rsa', default='easy-rsa')
parser.add_argument('-w', help='Create a Windows bundle', action='store_true')
parser.add_argument('-m', help='Create a Mac bundle', action='store_true')
parser.add_argument('-l', help='Create a Linux bundle', action='store_true')
parser.add_argument('-a', help='Create an Android Bundle', action='store_true')
parser.add_argument('client', help='is the name of the key you wish to create. It is also the name you use to revoke a client')
args=parser.parse_args()
client=args.client

# make sure we are root
if os.geteuid() != 0:
    print "You must run this utility as root!"
    sys.exit(0)

# make sure config exists
if not os.path.isfile('/etc/openvpn/clients/server.conf'):
    confhelp()
# get all settings from file
else:
    try:
        print "Reading Settings"
        f = open('/etc/openvpn/clients/server.conf')
        config = [y.split('=') for y in f.read().strip().split('\n')]
        f.close()
        settings = dict()
        for setting in config:
            settings[setting[0]] = setting[1]
        if 'server' not in settings:
            confhelp()
        else:
            server = settings['server']
        if 'port' in settings:
            port = settings['port']
        else:
            port = '1194'
        if 'proto' in settings:
            proto = settings['proto']
        else:
            proto = 'udp'
    except:
        print "Error parsing configuration file"
        confhelp()

print "Using server: {0}, port: {1}, proto: {2}".format(server,port,proto)

# check if files already exists
print "Checking for previous certificates"
keycheck = os.path.isfile('/etc/openvpn/'+args.ca+'/keys/{0}.key'.format(client))
certcheck = os.path.isfile('/etc/openvpn/'+args.ca+'/keys/{0}.crt'.format(client))

# if not create them
if not keycheck or not certcheck:
    print "Not found. Creating files"
    os.system('cd /etc/openvpn/'+args.ca+' && . ./vars && ./pkitool {0}'.format(client))

    keycheck = os.path.isfile('/etc/openvpn/'+args.ca+'+/keys/{0}.key'.format(client))
    certcheck = os.path.isfile('/etc/openvpn/'+args.ca+'+/keys/{0}.crt'.format(client))
    # if they still don't exist, quit
    if not keycheck or not certcheck:
        print 'Error creating certificate files!'
else:
    print "certificates found!"

# set parameters based on OS
if args.w:
    print "Creating Windows bundle"
    filename = '{client}.{os}.zip'.format(client=client,os="win")
    win = ''
    lin = ';'
    if os.path.isfile('/etc/openvpn/clients/win.exe'):
        clientfile = 'win.exe'
    else:
        clientfile = None
elif args.m:
    filename = '{client}.{os}.zip'.format(client=client,os="mac")
    print "Creating Mac bundle"
    win = lin = ';'
    if os.path.isfile('/etc/openvpn/clients/mac.dmg'):
        clientfile = 'mac.dmg'
    else:
        clientfile = None
elif args.l:
    filename = '{client}.{os}.zip'.format(client=client,os="lin")
    print "Creating Linux bundle"
    win = ';'
    lin = ''
    clientfile = None
elif args.a:
    filename = '{client}.{os}.zip'.format(client=client,os="and")
    print "Creating Android bundle"
    win = ';'
    lin = ';'
    clientfile = None

# check if path already exists
if os.path.isfile(filename):
    question = raw_input("file {filename} already exists. Overwrite? (Y/n) ".format(filename=filename))
    if question not in ['', 'y', 'Y', 'yes']:
        print "Not overwriting. Exiting."
        sys.exit(0)

path_client_key='/etc/openvpn/'+args.ca+'/keys/{0}.key'.format(client)
path_client_crt='/etc/openvpn/'+args.ca+'/keys/{0}.crt'.format(client)
path_ta_key='/etc/openvpn/ta.key'
path_ca_crt='/etc/openvpn/'+args.ca+'/keys/ca.crt'
path_config_template='./template.conf'
fclk = open(path_client_key, "r")
fccrt = open(path_client_crt, "r")
ftak =open(path_ta_key, "r")
fcacrt= open(path_ca_crt, "r")
template=open(path_config_template, "r")
conf = template.read()
conf=conf.format(win=win,lin=lin,notwin=';' if win == '' else '',client=client,server=server,port=port,proto=proto, cacrt=fcacrt.read(), clientcrt=fccrt.read(), clientkey=fclk.read())
fclk.close()
fccrt.close()
ftak.close()
fcacrt.close()
template.close()
print "Creating zip file"
try:
    zip = zipfile.ZipFile(filename,'w')
    zip.write(path_client_key,'{client}.key'.format(client=client))
    zip.write(path_client_crt,'{client}.crt'.format(client=client))
    zip.write(path_ta_key,'ta.key')
    zip.write(path_ca_crt,'ca.crt')
    zip.writestr('client.'+('ovpn' if win =='' else 'conf'),conf)
    if clientfile is not None:
        zip.write('/etc/openvpn/clients/'+clientfile,'client.'+('exe' if win =='' else 'dmg'))
except:
    print "Error creating zip file"
    print traceback.format_exc()
    sys.exit(0)

print "Done. Written to {0}".format(filename)
